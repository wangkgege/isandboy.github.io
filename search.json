[{"title":"git简介","url":"https://isandboy.github.io/2017/02/27/git-introduce/","content":"","categories":[],"tags":[]},{"title":"面向协议编程与 Cocoa 的邂逅实践","url":"https://isandboy.github.io/2017/02/27/Swift-Protocol-programing/","content":"<p>参考链接：</p>\n<p><a href=\"https://onevcat.com/2016/11/pop-cocoa-1/\" target=\"_blank\" rel=\"external\">https://onevcat.com/2016/11/pop-cocoa-1/</a><br><a href=\"https://onevcat.com/2016/12/pop-cocoa-2/\" target=\"_blank\" rel=\"external\">https://onevcat.com/2016/12/pop-cocoa-2/</a></p>\n<p>PDF下载：<br><a href=\"http://download.csdn.net/download/tangxiaoyin/9642142\" target=\"_blank\" rel=\"external\">http://download.csdn.net/download/tangxiaoyin/9642142</a></p>\n","categories":[],"tags":[]},{"title":"FMDB","url":"https://isandboy.github.io/2017/02/27/FMDB使用/","content":"<h1 id=\"FMDB\"><a href=\"#FMDB\" class=\"headerlink\" title=\"FMDB\"></a>FMDB</h1><p>FMDB的下载地址 <a href=\"https://github.com/ccgus/fmdb\" target=\"_blank\" rel=\"external\">https://github.com/ccgus/fmdb</a></p>\n<p>FMDB的安装<br>FMDB can be installed using CocoaPods.</p>\n<pre><code>pod &apos;FMDB&apos;\n# pod &apos;FMDB/FTS&apos;   # FMDB with FTS\n# pod &apos;FMDB/standalone&apos;   # FMDB with latest SQLite amalgamation source\n# pod &apos;FMDB/standalone/FTS&apos;   # FMDB with latest SQLite amalgamation source and FTS\n# pod &apos;FMDB/SQLCipher&apos;   # FMDB with SQLCipher\n</code></pre><h2 id=\"USage\"><a href=\"#USage\" class=\"headerlink\" title=\"USage\"></a>USage</h2><p>There are three main classes in FMDB:</p>\n<ol>\n<li><code>FMDatabase</code> - Represents a single SQLite database. Used for executing SQL statements.</li>\n<li><code>FMResultSet</code> - Represents the results of executing a query on an FMDatabase.</li>\n<li><code>FMDatabaseQueue</code> - If you’re wanting to perform queries and updates on multiple threads, you’ll want to use this class. It’s described in the “Thread Safety” section below.</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>在多线程中推荐使用<code>FMDatabaseQueue</code>，为了保证线程安全。</li>\n<li>为了提高执行效率，使用<code>Transactions</code>(事物)，批量执行sql语句。</li>\n<li>同一个sqlite数据库支持同时在多个线程里面执行查询操作，但不支持同时执行更新和查询操作。</li>\n</ol>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h4 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h4><p>当正在更新数据库的时候，用户执行了查询操作<br>假如更新数据库需要2分钟，那么就会出现页面卡顿的情况，当数据库更新完毕后，才会执行用户的查询操作。</p>\n<p>解决方法：</p>\n<ol>\n<li>更新数据库使用<code>Transactions</code>（事务），一般情况2万条数据需要3s左右，还是挺快的。</li>\n<li><p>但有时候设备性能比较差，可能需要40s左右，这样会让用户等待40s。<br>使用<code>Transactions</code>（事务）批量化执行sql语句，使用延迟事务操作。</p>\n<p> 如2万条数据，可以选择每次更新后，当前分线程休眠2s（足够用户执行查询操作），然后继续执行事务操作，以此类推，直到数据库更新完毕。</p>\n</li>\n</ol>\n","categories":[],"tags":[]},{"title":"Swift学习","url":"https://isandboy.github.io/2017/02/27/Swift-learn/","content":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>参考链接：<a href=\"http://swift.gg/2015/11/20/advanced-practical-enum-examples/\" target=\"_blank\" rel=\"external\">http://swift.gg/2015/11/20/advanced-practical-enum-examples/</a></p>\n<p>该篇文章中有讲到使用<strong>自定义类型作为枚举的值</strong>,但</p>\n","categories":[],"tags":["枚举，结构体"]},{"title":"Cocoapods 使用","url":"https://isandboy.github.io/2017/02/27/Cocoapods 使用/","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>CocoaPods是Swift和Objective-C项目的依赖管理器，它有超过2.6万个库并被超过160万个app使用， CocoaPods可以帮助您优化扩展项目。<br>CocoaPods管理的第三方开源库配置在<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">https://github.com/CocoaPods/Specs</a> 库中。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装最新版本</div><div class=\"line\">sudo gem install cocoapods</div><div class=\"line\">//安装指定版本</div><div class=\"line\">sudo gem install cocoapods -v 1.1.1</div></pre></td></tr></table></figure>\n<p>NOTE：在这里给大家推荐一款pod版本管理工具<code>podenv</code></p>\n<p>地址：<a href=\"https://github.com/kylef-archive/podenv\" target=\"_blank\" rel=\"external\">https://github.com/kylef-archive/podenv</a></p>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure>\n<p>NOTE：一般国内用户安装失败，是因为ruby源问题。因为ruby的软件源rubygems.org，使用的是亚马逊的云服务，但被我天朝屏蔽了。</p>\n<p><strong><em>一般的解决方式有两种：</em></strong></p>\n<ol>\n<li>移除<a href=\"https://rubygems.org\" target=\"_blank\" rel=\"external\">https://rubygems.org</a> 源，添加<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"external\">https://gems.ruby-china.org/</a> ，操作请看下面关于<code>gem sources</code> 命令介绍</li>\n<li>翻墙，关于如何翻墙问题，网上教程说的很详细，这里就不在累述。</li>\n</ol>\n<p>作为一名开发者，推荐使用<strong>第二种</strong>方式</p>\n<p>当cocoapods安装后，可以通过<code>pod --version</code>命令来查看当前安装的cocoapods版本</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>使用terminal切换到你的project目录</li>\n<li>创建一个Podfile文件，你可以使用<code>touch Podfile</code>创建，但是有一种更为优雅的方式，通过在terminal执行<code>pod init</code>命令</li>\n<li>在你的Podfile文件里面为所欲为吧，关于Podfile的配置，请参考cocoapods官方链接：<a href=\"https://guides.cocoapods.org/syntax/podfile.html\" target=\"_blank\" rel=\"external\">https://guides.cocoapods.org/syntax/podfile.html</a></li>\n<li>保存Podfile文件，运行<code>pod install</code></li>\n<li>以后打开你的项目都使用<strong>ProjectName.xcworkspace</strong>而非<strong>ProjectName.xproject</strong></li>\n</ol>\n<h2 id=\"pod-install-vs-pod-update\"><a href=\"#pod-install-vs-pod-update\" class=\"headerlink\" title=\"pod install vs pod update\"></a>pod install vs pod update</h2><p><code>pod install</code>和<code>pod update</code>命令，也许大家只会在第一次使用cocoapods配置project的时候使用一次<code>pod install</code>，甚至一次都没用过，一般都直接使用<code>pod update</code>命令了</p>\n<p>但是：<code>pod install</code>和<code>pod update</code>有什么区别呢，分别在什么时候使用呢？</p>\n<p><strong><em>NOTE：</em></strong></p>\n<ul>\n<li>install一个新的pods在你的project中，即使在你的project里面已经有一个<strong>Podfile</strong>文件或者之前已经执行了<code>pod install</code>命令</li>\n<li>使用<code>pod update [PODNAME]</code>，仅仅当你想要更新pods到一个新的版本的时候</li>\n</ul>\n<p><code>pod update</code>会更新所有Podfile文件里面所指定的依赖到一个新的版本。</p>\n<p><code>pod update [PODNAME]</code>仅仅会更新<strong>[PODNAME]</strong> 库</p>\n<p><strong><em>pod install</em></strong></p>\n<p>它不仅适用于当你第一次为你的project去检索新的pods的时候，也适用于你每次编辑<code>Podfile</code>文件（如：添加，更新，或者移除一个pod的时候）</p>\n<p>但是有以下需要注意：</p>\n<ul>\n<li>每次执行<code>pod install</code>命令，会根据<strong>Podfile.lock</strong>文件已经明确列出的库以及对应的版本去下载并安装pods，<br>而不会去检查相应的库是否有新的版本。其中<strong>Podfile.lock</strong>文件会记录已经引入的pod库和相应的版本。</li>\n<li>当你pods没有在<strong>Podfile.lock</strong>文件列出的时候，它会去根据Podfile文件里面所描述的依赖去下载（如：pod ‘MyPod’, ‘~&gt; 1.2’）</li>\n</ul>\n<p>NOTE:</p>\n<p><strong><em>pod outdated</em></strong></p>\n<p>当你使用<code>pod outdated</code>命令时，Cocoapods会列出比Podfile.lock文件中的pod更新的所有pods。这个时候你就可以使用<code>pod update PODNAME1 PODNAME2</code>去更新PODNAME1和PODNAME2的版本（pod update 后面可以跟多个pod）</p>\n<p><strong><em>pod update</em></strong></p>\n<p>当你执行<code>pod udpate PODNAME</code>命令的时候，它将会更新该库到一个满足在Podfile文件里面对该库限制的一个最新版本，而不会关心Podfile.lock文件里面对该库有没有限制</p>\n<p><strong><em>pod install/update [–no-repo-update]</em></strong></p>\n<p>执行<code>pod install/update</code> 命令会首先更新本地的配置库</p>\n<p>执行<code>pod install/update --no-repo-update</code> 命令不会更新本地的配置库</p>\n<p>本地配置库位置可以通过以下命令查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.cocoapods/repos</div><div class=\"line\">ls</div></pre></td></tr></table></figure></p>\n<p>关于Cocoapods的使用更加详细的介绍：可以参考 <strong>最新的 CocoaPods 的使用教程</strong> 系列文章介绍<br><a href=\"http://ios.jobbole.com/90957/\" target=\"_blank\" rel=\"external\">http://ios.jobbole.com/90957/</a></p>\n<p><strong>master</strong>文件夹是官方的open sources library</p>\n<p><strong><em>gem sources</em></strong></p>\n<p>关于查看当前电脑的ruby源，有如下一些命令需要了解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources -l #查看当前已经制定的源</div><div class=\"line\">gem sources -r SOURCE_URI #移除源</div><div class=\"line\">gem sources -a SOURCE_URI #添加源</div></pre></td></tr></table></figure>\n<p>详情请参考：<code>gem sources --help</code> 来查看</p>\n","categories":[],"tags":[]},{"title":"Cocoapods创建私有库","url":"https://isandboy.github.io/2017/02/27/Making-Cocoapods/","content":"<p>这篇文章主要是介绍怎么去创建和维护一个Cocoapods</p>\n<ol>\n<li>Using Pod Lib Create</li>\n<li>Getting setup with Trunk</li>\n</ol>\n<h2 id=\"Getting-setup-with-Trunk\"><a href=\"#Getting-setup-with-Trunk\" class=\"headerlink\" title=\"Getting setup with Trunk\"></a>Getting setup with Trunk</h2><p>使用Pod创建库，打开终端敲入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib create MyLirary</div></pre></td></tr></table></figure>\n<p>NOTE: 如果你想要使用你自己的<strong>pod-template</strong>去创建Pod库，你可以在上面的命令后面追加<code>--template-url=url</code>参数，其中url是你的git repo库地址。<br>如果不追加参数默认拉取的模板地址是<a href=\"https://github.com/CocoaPods/pod-template\" target=\"_blank\" rel=\"external\">https://github.com/CocoaPods/pod-template</a></p>\n<p>敲入以上命令回车后，会让你回答几个问题，安装提示填入就行。</p>\n<p>创建Project之后会，会自动运行<code>pod install</code>命令，让我们来看看Cocoapods给我们生成的文件目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tree MyLib -L 2</div><div class=\"line\"></div><div class=\"line\">  MyLib</div><div class=\"line\">  ├── .travis.yml</div><div class=\"line\">  ├── _Pods.xcproject</div><div class=\"line\">  ├── Example</div><div class=\"line\">  │   ├── MyLib</div><div class=\"line\">  │   ├── MyLib.xcodeproj</div><div class=\"line\">  │   ├── MyLib.xcworkspace</div><div class=\"line\">  │   ├── Podfile</div><div class=\"line\">  │   ├── Podfile.lock</div><div class=\"line\">  │   ├── Pods</div><div class=\"line\">  │   └── Tests</div><div class=\"line\">  ├── LICENSE</div><div class=\"line\">  ├── MyLib.podspec</div><div class=\"line\">  ├── Pod</div><div class=\"line\">  │   ├── Assets</div><div class=\"line\">  │   └── Classes</div><div class=\"line\">  │     └── RemoveMe.[swift/m]</div><div class=\"line\">  └── README.md</div></pre></td></tr></table></figure>\n<ul>\n<li>.travis.yml - 一个travis-ci配置文件.</li>\n<li>_Pods.xcproject - 支持Carthage的对你Pod’s Project的链接.</li>\n<li>LICENSE - 默认是 MIT License.</li>\n<li>MyLib.podspec - 你的Library的配置文件.</li>\n<li>README.md - a default README in markdown.</li>\n<li>RemoveMe.swift/m - 无用文件删除即可.</li>\n<li>Pod - 放置你的库代码和资源的文件夹</li>\n<li>Example - Demo，方便你去调试你的库</li>\n</ul>\n<h2 id=\"Getting-setup-with-Trunk-1\"><a href=\"#Getting-setup-with-Trunk-1\" class=\"headerlink\" title=\"Getting setup with Trunk\"></a>Getting setup with Trunk</h2><p>关于怎么发布自己的Pods到Cocoapods trunk，</p>\n<p>请参考：</p>\n<ol>\n<li><a href=\"http://www.tuicool.com/articles/6FF7fi\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/6FF7fi</a></li>\n<li><a href=\"https://guides.cocoapods.org/making/getting-setup-with-trunk.html\" target=\"_blank\" rel=\"external\">https://guides.cocoapods.org/making/getting-setup-with-trunk.html</a></li>\n</ol>\n<h2 id=\"Private-Pods\"><a href=\"#Private-Pods\" class=\"headerlink\" title=\"Private Pods\"></a>Private Pods</h2><p><strong><em>1. Create a Private Spec Repo</em></strong><br>参考：<a href=\"https://guides.cocoapods.org/making/private-cocoapods.html\" target=\"_blank\" rel=\"external\">https://guides.cocoapods.org/making/private-cocoapods.html</a></p>\n<h2 id=\"私有远端仓库\"><a href=\"#私有远端仓库\" class=\"headerlink\" title=\"私有远端仓库\"></a>私有远端仓库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>##</p>\n<p>待修改</p>\n<h2 id=\"验证podspec有效性\"><a href=\"#验证podspec有效性\" class=\"headerlink\" title=\"验证podspec有效性\"></a>验证podspec有效性</h2><p>当开发完私有库之后，把配置库，提交到私有创库，或者cocoapods的公有库仓库，流程如下</p>\n<p><strong><em>1. 本地验证仓库有效性</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib lint --source --use-libraries --allow-warnings --verbose</div></pre></td></tr></table></figure>\n<p>其中pod lib lint 之后的参数都是可选参数</p>\n<ul>\n<li>–source：当开发私有库的时候，</li>\n<li>–use-libraries: podspec文件里面通过pod dependencies指定的依赖，是否包含静态库，当不加此参数会验证失败。因为swift开发的库，不能包含静态库，所以此参数只针对Objective-C</li>\n<li>–allow-warnings：是否忽略警告。</li>\n<li>–verbose：详细log</li>\n</ul>\n<p><strong><em>2. 提交代码</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git ci -m&quot;edit commit message&quot;</div><div class=\"line\">git tag 0.1.0</div><div class=\"line\">git push origin master tags</div></pre></td></tr></table></figure>\n<p><strong><em>3. 推送podspec配置文件到私有库</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod repo push SYSpecs [MyLib.podspec] --use-libraries --allow-warnings --verbose</div></pre></td></tr></table></figure>\n<p>其中参数与验证参数一个含义，验证的时候加了哪些可选参数，推送配置文件到私有库的时候也要加</p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://isandboy.github.io/2017/02/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"search","url":"https://isandboy.github.io/search/index.html","content":"","categories":[],"tags":[]}]